using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace dexih.functions.ml
{
    public class Clustering
    {
        private DynamicList _dynamicList;
        private Prediction _prediction;


        public class ClusterPrediction
        {
            public uint PredictedLabel { get; set; }
            public float[] Score { get; set; }
        }

        public class ClusterLabelPrediction
        {
            public uint PredictedLabel { get; set; }
            public string Prediction { get; set; }
            public string Data { get; set; }
            public float[] Score { get; set; }
        }
        
        
        public void Reset()
        {
            _prediction = null;
        }


        public string[] ImportModelLabels(byte[] model) => Helpers.ImportModelLabels(model);
        
        [TransformFunction(FunctionType = EFunctionType.Aggregate, Category = "Machine Learning", 
            Name = "Clustering (K-Means) Analysis - Train", 
            Description = "Builds a model using k-means clustering based on the training data.", 
            ResultMethod = nameof(ClusteringKMeansTrainResult), ResetMethod = nameof(Reset))]
        public void ClusteringKMeansTrain(
            [TransformFunctionLinkedParameter("Data Fields"), TransformParameterLabel] string[] label,
            [TransformFunctionLinkedParameter("Data Fields")] object[] value,
            [TransformFunctionLinkedParameter("Data Fields"), ParameterDefault("None")] EEncoding[] encoding)
        {
            _dynamicList = _dynamicList.AddData(label, value, encoding);
        }
        
        public  byte[] ClusteringKMeansTrainResult(int numberOfClusters)
        {
            // Create a new context for ML.NET operations. It can be used for exception tracking and logging,
            // as a catalog of available operations and as the source of randomness.
            var mlContext = new MLContext();
            if (_dynamicList == null)
            {
                return null;
            }
            var trainData = _dynamicList.GetDataView(mlContext);

            var featuresColumnName = "Features";
            var pipeline = Helpers.CreatePipeline(mlContext, _dynamicList.Fields, featuresColumnName, false)
                .Append(mlContext.Clustering.Trainers.KMeans(featuresColumnName, numberOfClusters: numberOfClusters));
            
            var trainedModel = pipeline.Fit(trainData);
            
            return Helpers.SaveModel(mlContext, trainData.Schema, trainedModel);
        }
        

        [TransformFunction(FunctionType = EFunctionType.Aggregate, Category = "Machine Learning", Name = "Clustering (K-Means) Analysis - Evaluate", Description = "Evaluates the accuracy of a model using k-means clustering based on the training data.", ResultMethod = nameof(ClusteringKMeansEvaluateResult), ResetMethod = nameof(Reset))]
        public void ClusteringKMeansEvaluate(
            [TransformFunctionLinkedParameter("Data Fields"), TransformParameterLabel] string[] label,
            [TransformFunctionLinkedParameter("Data Fields")] object[] value,
            [TransformFunctionLinkedParameter("Data Fields"), ParameterDefault("None")] EEncoding[] encoding)
        {
            _dynamicList = _dynamicList.AddData(label, value, encoding);
        }
        
        public ClusteringMetrics ClusteringKMeansEvaluateResult(
            [TransformFunctionParameter(Name = "Model", Description = "The model generated by the clustering K-Means training function." )]byte[] model)
        {
            // Create a new context for ML.NET operations. It can be used for exception tracking and logging,
            // as a catalog of available operations and as the source of randomness.
            var mlContext = new MLContext();
            var trainedModel = Helpers.LoadModel(mlContext, model, out _);
            
            if (_dynamicList == null)
            {
                return null;
            }
            var trainData = _dynamicList.GetDataView(mlContext);

            var predictions = trainedModel.Transform(trainData);

            var metrics = mlContext.Clustering.Evaluate(predictions);
            
            return metrics;
        }

        
        [TransformFunction(FunctionType = EFunctionType.Map, Category = "Machine Learning", Name = "Clustering (K-Means) Analysis - Predict", Description = "Predicts a value using k-means clustering based on the training data.", ResetMethod = nameof(Reset), ImportMethod = nameof(ImportModelLabels))]
        public ClusterPrediction ClusteringKMeansPredict(
            [TransformFunctionParameter(Name = "Model", Description = "The model generated by the clustering sdca training function." )] byte[] model, 
            [TransformFunctionLinkedParameter("Data Fields"), TransformParameterLabel] string[] label, 
            [TransformFunctionLinkedParameter("Data Fields")] object[] value,
            [TransformFunctionLinkedParameter("Data Fields"), ParameterDefault("None")] EEncoding[] encoding)
        {
            if (_prediction == null)
            {
                _prediction = new Prediction(typeof(ClusterPrediction), model, label, encoding);
            }

            return _prediction.Run<ClusterPrediction>(value);
        }
        
        [TransformFunction(FunctionType = EFunctionType.Aggregate, Category = "Machine Learning", Name = "Clustering (Stochastic Dual Coordinate Ascent) Analysis - Train", Description = "Builds a model using Stochastic Dual Coordinate Ascent clustering based on the training data.", ResultMethod = nameof(ClusteringSdcaTrainResult), ResetMethod = nameof(Reset))]
        public void ClusteringSdcaTrain(
            string predictorLabel,
            [TransformFunctionLinkedParameter("Data Fields"), TransformParameterLabel] string[] label,
            [TransformFunctionLinkedParameter("Data Fields")] object[] value,
            [TransformFunctionLinkedParameter("Data Fields"), ParameterDefault("None")] EEncoding[] encoding)
        {
            _dynamicList = _dynamicList.AddData(label, value, encoding, predictorLabel, EEncoding.Label);
        }
        
        public byte[] ClusteringSdcaTrainResult(
            [TransformFunctionParameter(Description = "Maximum number of passes to iterate over the data.")] int maximumNumberOfIterations = 30,
            [TransformFunctionParameter(Description = "The L2 weight for [regularization](https://en.wikipedia.org/wiki/Regularization_(mathematics)))")] float? l2Regularization = null,
            [TransformFunctionParameter(Description = "The L1 [regularization](https://en.wikipedia.org/wiki/Regularization_(mathematics)) hyperparameter. Higher values will tend to lead to more sparse model.")] float? l1Regularization = null
            )
        {
            // Create a new context for ML.NET operations. It can be used for exception tracking and logging,
            // as a catalog of available operations and as the source of randomness.
            var mlContext = new MLContext();
            if (_dynamicList == null)
            {
                return null;
            }
            var trainData = _dynamicList.GetDataView(mlContext);

            var inputFields = _dynamicList.Fields.Select(c => c.Name).Where(c => c != Helpers.PredictedLabel).ToArray();

            var dataProcessPipeline = 
                mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: "KeyColumn", inputColumnName: Helpers.PredictedLabel)
                .Append(mlContext.Transforms.Concatenate("Features", inputFields));

            var trainer =
                mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName: "KeyColumn", featureColumnName: "Features", maximumNumberOfIterations: maximumNumberOfIterations, l1Regularization: l1Regularization, l2Regularization: l2Regularization)
                .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: "Prediction" , inputColumnName: "PredictedLabel"));

            var pipeline = dataProcessPipeline.Append(trainer);

            var trainedModel = pipeline.Fit(trainData);
            return Helpers.SaveModel(mlContext, trainData.Schema, trainedModel);
        }    
        
        [TransformFunction(FunctionType = EFunctionType.Aggregate, Category = "Machine Learning", Name = "Clustering (Stochastic Dual Coordinate Ascent) Analysis - Evaluate", Description = "Evaluates a model using Stochastic Dual Coordinate Ascent clustering based on the training data.", ResultMethod = nameof(ClusteringSdcaEvaluateResult), ResetMethod = nameof(Reset), ImportMethod = nameof(ImportModelLabels))]
        public void ClusteringSdcaEvaluate( [TransformFunctionLinkedParameter("Data Fields"), TransformParameterLabel] string[] label,
            [TransformFunctionLinkedParameter("Data Fields")] object[] value,
            [TransformFunctionLinkedParameter("Data Fields"), ParameterDefault("None")] EEncoding[] encoding)
        {
            _dynamicList = _dynamicList.AddData(label, value, encoding);
        }
        
        public MulticlassClassificationMetrics ClusteringSdcaEvaluateResult(
            [TransformFunctionParameter(Name = "Model", Description = "The model generated by the clustering sdca training function." )]byte[] model)
        {
            // Create a new context for ML.NET operations. It can be used for exception tracking and logging,
            // as a catalog of available operations and as the source of randomness.
            var mlContext = new MLContext();
            var trainedModel = Helpers.LoadModel(mlContext, model, out _);
            if (_dynamicList == null)
            {
                return null;
            }
            var trainData = _dynamicList.GetDataView(mlContext);

            var predictions = trainedModel.Transform(trainData);

            var metrics = mlContext.MulticlassClassification.Evaluate(predictions);
            return metrics;
        } 
        
        [TransformFunction(FunctionType = EFunctionType.Map, Category = "Machine Learning", Name = "Clustering (Stochastic Dual Coordinate Ascent) Analysis - Predict", Description = "Predicts a value using Stochastic Dual Coordinate Ascent clustering based on the training data.", ResetMethod = nameof(Reset), ImportMethod = nameof(ImportModelLabels))]
        public ClusterLabelPrediction ClusteringSdcaPredict(
            [TransformFunctionParameter(Name = "Model", Description = "The model generated by the clustering sdca training function." )] byte[] model, 
            [TransformFunctionLinkedParameter("Data Fields"), TransformParameterLabel] string[] label,
            [TransformFunctionLinkedParameter("Data Fields")] object[] value,
            [TransformFunctionLinkedParameter("Data Fields"), ParameterDefault("None")] EEncoding[] encoding
            )
        {
            if (_prediction == null)
            {
                _prediction = new Prediction(typeof(ClusterLabelPrediction), model, label, encoding);
            }

            var prediction = _prediction.Run<ClusterLabelPrediction>(value);

            return prediction;
        }
    }
}